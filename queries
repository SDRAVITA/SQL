
--Query1
SELECT movie_year 
FROM Movie
WHERE movie_title='American Beauty';

--Query 2
SELECT A.*
FROM reviewer A INNER JOIN rating B
ON A.reviewer_id = B.reviewer_id
WHERE B.rev_stars>=7;

--Query 3
SELECT *
FROM Movie
WHERE movie_title LIKE '%Boogie%Nights%'
ORDER BY movie_year ASC;

--Query 4
SELECT DISTINCT * 
FROM movie 
WHERE movie_id IN (
SELECT movie_id 
FROM rating 
WHERE rev_stars<7) 
ORDER BY movie_year desc;

--Query 5
SELECT reviewer_name, movie_title 
FROM reviewer, movie, rating, rating r2
WHERE rating.movie_id=movie.movie_id 
  AND reviewer.reviewer_id=rating.reviewer_ID 
    AND rating.reviewer_id = r2.reviewer_id 
GROUP BY reviewer_name, movie_title HAVING count(*) > 2;

--Query 6
SELECT genre_title, AVG(movie_time), COUNT(genre_title) 
FROM movie M
INNER JOIN  genre G ON M.genre_id=G.genre_id
GROUP BY genre_title;
	
--Query 7
SELECT movie_title, movie_year, release_date,dir_first_name, dir_last_name 
FROM movie M
INNER JOIN  director D
   ON M.director_id=D.director_id
WHERE release_date <'01/01/1989'
ORDER BY release_date desc;
	
--Query 8 
SELECT movie_title, MAX(rev_stars)
FROM movie, rating 
WHERE movie.movie_id=rating.movie_id 
AND movie_title LIKE ('%Am%')
GROUP BY  movie_title
ORDER BY movie_title;
	
--Query 9
CREATE view movie_budget AS(
	SELECT movie_title,M.actor_id ,actor_first_name, actor_last_name, budget
	FROM movie M
	INNER JOIN actor A
	ON M.actor_id=A.actor_id
	WHERE budget<600000
)
SELECT * from movie_budget

--Query 10
WITH reviewer_details AS(
SELECT  movie_title,reviewer_id,rev_stars
FROM movie
INNER JOIN rating ON movie.movie_id = rating.movie_id
WHERE rev_stars BETWEEN 6 AND 7
ORDER BY  movie_title,rev_stars
)
SELECT reviewer_details.*,reviewer_name
FROM reviewer_details
INNER JOIN reviewer ON reviewer.reviewer_id = reviewer_details.reviewer_id
ORDER By reviewer_name

--Some More queries
--QUERY 1
--Show the count of movies completed year-wise.
WITH movie_count_per_year AS (SELECT movie_completion_year, COUNT(*) AS movie_count
FROM movie
GROUP BY movie_completion_year
)
SELECT movie_title, moy.*
FROM movie mov 
INNER JOIN movie_count_per_year moy 
ON mov.movie_completion_year=moy.movie_completion_year
ORDER BY moy.movie_completion_year;


--QUERY 2
--Display the movie which has made highest profit(total_earnings-budget) among all.
SELECT * 
FROM movie 
WHERE (total_earnings-budget)=(SELECT MAX(ABS(total_earnings-budget))
FROM movie)

--QUERY 3
--Display movies which were made with high budget but failed at box office

SELECT * 
FROM rating rat 
INNER JOIN movie mov 
ON mov.movie_id=rat.movie_id
WHERE budget IN (SELECT budget FROM movie order by budget desc LIMIT 5)
AND rev_stars IN (SELECT rev_stars FROM rating order by rev_stars  LIMIT 5)

--Query 4
--Display top 5 genre-id under which most of the movies are released.

SELECT M.genre_id,genre_title,COUNT(*) movie_count
FROM movie M 
INNER JOIN genre G
on M.genre_id=G.genre_id
GROUP BY M.genre_id,G.genre_title
ORDER BY movie_count desc
LIMIT 5

--QUERY 5
---Display movie titles starting with 'B' released under different genre along with director details.
SELECT movie_ID,movie_title,gen.genre_id,genre_title,dir.director_id, 
CONCAT_WS (' ',dir_first_name,dir_last_name) AS director_name
FROM movie mov
INNER JOIN genre gen
ON mov.genre_id=gen.genre_id
INNER JOIN director dir
ON mov.director_id=dir.director_id
WHERE movie_title LIKE 'B%'

--QUERY 6
--Using a view find the most active reviewer and display number of movies they rated.
CREATE VIEW  count_rev AS 
(SELECT MAX(x.counter) AS rev_count
FROM ( SELECT reviewer_id,COUNT(*) AS counter 
	  FROM rating 
	  GROUP BY reviewer_id)x )

SELECT rat.reviewer_id,reviewer_name,COUNT(*) AS counter 
FROM rating rat 
INNER JOIN reviewer rev 
ON rat.reviewer_id=rev.reviewer_id
GROUP BY rat.reviewer_id,reviewer_name
HAVING COUNT(*)= (SELECT rev_count FROM count_rev )

--QUERY 7
---Display movies which has been released later an year after its completion

SELECT movie_id,movie_title,movie_completion_year,
EXTRACT (year FROM release_date) AS release_year 
FROM movie
WHERE EXTRACT (year FROM release_date)-movie_completion_year>1

--QUERY 8
--SORT MOVIES AS Blockbuster,Good, Average and Below Average according to their rating and name 
--the new column as 'box_office_performance'.

SELECT movie_title,rev_stars,
CASE 
WHEN rev_stars >8 THEN 'Blockbuster'
WHEN rev_stars BETWEEN 6 AND 8 THEN 'Good'
WHEN rev_stars BETWEEN 5 AND 6 THEN 'Average'
ELSE 'Below Average'
END AS box_office_performance
FROM movie mov
INNER JOIN rating rat
ON mov.movie_id=rat.movie_id
ORDER BY rev_stars DESC;

--QUERY 9
--Display actor-director combination that repeated more than once.

WITH act_dir_mov_count AS (SELECT actor_id,director_id,
						   COUNT(*) OVER (PARTITION BY actor_id,director_id )
AS movie_count
FROM movie )
SELECT DISTINCT CONCAT_WS (' ',actor_first_name,actor_last_name) AS actor_name,
CONCAT_WS (' ',dir_first_name,dir_last_name) AS director_name,
movie_count
FROM act_dir_mov_count mov
INNER JOIN actor act
ON mov.actor_id=act.actor_id
INNER JOIN director dir
ON mov.director_id=dir.director_id
WHERE movie_count>1 
ORDER BY movie_count DESC;

--Query 10
--Divide movies according to their budget in 5 different buckets.

SELECT WIDTH_BUCKET(BUDGET, 
					(SELECT MIN(budget) FROM movie), (SELECT MAX(budget) FROM movie), 5) AS BUCKET, 
					COUNT (*) AS MOVIE_COUNT
FROM movie
GROUP BY 
WIDTH_BUCKET(BUDGET, (SELECT MIN(budget) FROM movie), (SELECT MAX(budget) FROM movie), 5)
ORDER BY MOVIE_COUNT DESC;
